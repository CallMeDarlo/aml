# -*- coding: utf-8 -*-
"""CIFAR_10_(Mini_Project).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wKuO_MYERPcvtWn9eUh6HMAhWSDfM4_P
"""

#Importing libraries

import keras
import tensorflow as tf
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, MaxPool2D, Flatten, Dropout
import numpy as np
import pandas as pd
from tensorflow.keras.utils import to_categorical
from sklearn import metrics
import seaborn as sns

(train_images, train_labels),(test_images, test_labels) = tf.keras.datasets.cifar10.load_data()
label_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']

print("Total training images : ",train_images.shape)
print("Total testing images : ",test_images.shape)

#Normalizing the values of pixels in the range of [0,1]
x_train = train_images/255
x_test = test_images/255

#Changing the labels of the data from categorical to the range [0,9]
y_train_onehot = to_categorical(train_labels)
y_test_onehot = to_categorical(test_labels)

model = Sequential()

# Input Layer
model.add(Conv2D(50, kernel_size=(3,3), strides=(1,1), padding='same', activation='relu', input_shape=(32,32,3)))

# Convolution Layers
model.add(Conv2D(64, kernel_size=(3,3), strides=(1,1), padding='same', activation='relu'))
model.add(MaxPool2D(pool_size=(2,2)))
model.add(Dropout(0.2))

model.add(Conv2D(128, kernel_size=(3,3), strides=(1,1), padding='same', activation='relu'))
model.add(MaxPool2D(pool_size=(2,2)))
model.add(Dropout(0.2))

model.add(Conv2D(256, kernel_size=(3,3), strides=(1,1), padding='same', activation='relu'))
model.add(MaxPool2D(pool_size=(2,2)))
model.add(Dropout(0.2))

model.add(Conv2D(256, kernel_size=(3,3), strides=(1,1), padding='same', activation='relu'))
model.add(MaxPool2D(pool_size=(2,2)))
model.add(Dropout(0.2))

# Change output to array
model.add(Flatten())

# Dense Layer
model.add(Dense(500, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(250, activation='relu'))
model.add(Dropout(0.2))
# Output Layer
model.add(Dense(10, activation='softmax'))

model.summary()

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
cifar = model.fit(x_train, y_train_onehot, epochs=20, validation_data=(x_test, y_test_onehot))

y_pred = model.predict(x_test)
y_pred = np.argmax(y_pred, axis=1)

cm_cnn = metrics.confusion_matrix(test_labels, y_pred)
fig, ax = plt.subplots(figsize=(10, 8))
ax = sns.heatmap(cm_cnn, annot=True, fmt='g', xticklabels=label_names, yticklabels=label_names)
ax.set(ylabel="True Label", xlabel="Predicted Label")
plt.show()

print(metrics.classification_report(test_labels, y_pred))

import cv2
plt.imshow(x_test[102])

i = np.random.randint(len(train_images))
resized_img = cv2.resize(x_test[102], (32,32))
resized_img= np.expand_dims(resized_img, axis=0)

pre=model.predict(resized_img)
n = np.argmax(pre)

print("Output Label:", n)
print(label_names[n])