# -*- coding: utf-8 -*-
"""amazon_game.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-n7PYb7w6gFcZIcvcsBg8LOgTyNzGHWM
"""

import pandas as pd
nltk.download('all')
import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
from sklearn.metrics import accuracy_score

#Reading the dataset
df = pd.read_csv('/content/amazon.csv')
df

df.shape

df.isnull().sum()

df['Class'].value_counts()

#Plotting a bar plot to show distribution of data
# 1 means positive review and 0 means negative review
df['Class'].value_counts().plot(kind='bar')

"""*DATA CLEANING AND PREPROCESSING*"""

def preprocess_text(text):
    text=text.lower()  #Convert text to LowerCase
    text=text.replace('[^a-zA-z.,!?/:;\"\'\s]', '') #Remove numbers
    text=text.replace('[^a-zA-Z0-9 ]', '') #Remove Special Characters
    tokens = word_tokenize(text)

    filtered_tokens = [token for token in tokens if token not in stopwords.words('english')]
    lemmatizer = WordNetLemmatizer()
    lemmatized_tokens = [lemmatizer.lemmatize(token) for token in filtered_tokens]

    processed_text = ' '.join(lemmatized_tokens)
    return processed_text

df['reviewText'] = df['reviewText'].apply(preprocess_text)
df.head(5)

sid = SentimentIntensityAnalyzer() #Using NLTK Sentiment Analyser

def get_sentiment(text):
    scores = sid.polarity_scores(text)
    sentiment = 1 if scores['pos'] > 0 else 0 #Marks 1 for Positive and 0 for Negative
    return sentiment

df['sentiment'] = df['reviewText'].apply(get_sentiment)

df.head(5)

"""*MODEL ACCURACY*"""

from sklearn.metrics import confusion_matrix
print(confusion_matrix(df['Class'], df['sentiment']))

print("Accuracy of the model is ",accuracy_score(df['Class'], df['sentiment']))

from sklearn.metrics import classification_report
print(classification_report(df['Class'], df['sentiment']))

"""*Custom Prediciton Model*"""

#In order to use this model, change the review to your preference. The model will give the polarity scores of the review and will also tell whether it is a positve review or a negative review.
review = 'Greatest game ever'
review=preprocess_text(review)
print("Polarity scores ",sid.polarity_scores(review))
sentiment = get_sentiment(review)
print("Positve" if sentiment==1 else "Negative")